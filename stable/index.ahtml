<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.20">
<title>Static websites with GatsbyJS and Enonic XP</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/*! Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */
/* Uncomment the following line when using as a custom stylesheet */
/* @import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"; */
html{font-family:sans-serif;-webkit-text-size-adjust:100%}
a{background:none}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
b,strong{font-weight:bold}
abbr{font-size:.9em}
abbr[title]{cursor:help;border-bottom:1px dotted #dddddf;text-decoration:none}
dfn{font-style:italic}
hr{height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
audio,video{display:inline-block}
audio:not([controls]){display:none;height:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type=checkbox],input[type=radio]{padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,::before,::after{box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;line-height:1;position:relative;cursor:auto;-moz-tab-size:4;-o-tab-size:4;tab-size:4;word-wrap:anywhere;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:0}
p{line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ul.square{list-style-type:square}
ul.circle ul:not([class]),ul.disc ul:not([class]),ul.square ul:not([class]){list-style:inherit}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:1px solid #dedede;word-wrap:normal}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt{background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
:not(pre).nobreak{word-wrap:normal}
:not(pre).nowrap{white-space:nowrap}
:not(pre).pre-wrap{white-space:pre-wrap}
:not(pre):not([class^=L])>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre{color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;line-height:1.45;text-rendering:optimizeSpeed}
pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}
pre>code{display:block}
pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;border-radius:3px;box-shadow:0 1px 0 rgba(0,0,0,.2),inset 0 0 0 .1em #fff;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin:0 auto;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:flex;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border:1px solid #e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:none;background:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:hsla(0,0%,100%,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
details{margin-left:1.25rem}
details>summary{cursor:pointer;display:block;position:relative;line-height:1.6;margin-bottom:.625rem;outline:none;-webkit-tap-highlight-color:transparent}
details>summary::-webkit-details-marker{display:none}
details>summary::before{content:"";border:solid transparent;border-left:solid;border-width:.3em 0 .3em .5em;position:absolute;top:.5em;left:-1.25rem;transform:translateX(15%)}
details[open]>summary::before{border:solid transparent;border-top:solid;border-width:.5em .3em 0;transform:translateY(15%)}
details>summary::after{content:"";width:1.25rem;height:1em;position:absolute;top:.3em;left:-1.25rem}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class=paragraph]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6);word-wrap:anywhere}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border:1px solid #e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;border-radius:4px}
.sidebarblock{border:1px solid #dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;border-radius:4px}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:first-child,.sidebarblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child,.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock>.content>pre{border-radius:4px;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.listingblock>.content>pre{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.listingblock>.content>pre{font-size:1em}}
.literalblock pre,.listingblock>.content>pre:not(.highlight),.listingblock>.content>pre[class=highlight],.listingblock>.content>pre[class^="highlight "]{background:#f7f7f8}
.literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.prettyprint{background:#f7f7f8}
pre.prettyprint .linenums{line-height:1.45;margin-left:2em}
pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}
pre.prettyprint li code[data-lang]::before{opacity:1}
pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}
table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}
table.linenotable td.code{padding-left:.75em}
table.linenotable td.linenos,pre.pygments .linenos{border-right:1px solid;opacity:.35;padding-right:.5em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}
pre.pygments span.linenos{display:inline-block;margin-right:.75em}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock:not(.excerpt)>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans-serif;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt>blockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;font-size:.85rem;text-align:left;margin-right:0}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:1.25em;word-wrap:anywhere}
td.tableblock>.content>:last-child{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>*>tr>*{border-width:1px}
table.grid-cols>*>tr>*{border-width:0 1px}
table.grid-rows>*>tr>*{border-width:1px 0}
table.frame-all{border-width:1px}
table.frame-ends{border-width:1px 0}
table.frame-sides{border-width:0 1px}
table.frame-none>colgroup+*>:first-child>*,table.frame-sides>colgroup+*>:first-child>*{border-top-width:0}
table.frame-none>:last-child>:last-child>*,table.frame-sides>:last-child>:last-child>*{border-bottom-width:0}
table.frame-none>*>tr>:first-child,table.frame-ends>*>tr>:first-child{border-left-width:0}
table.frame-none>*>tr>:last-child,table.frame-ends>*>tr>:last-child{border-right-width:0}
table.stripes-all>*>tr,table.stripes-odd>*>tr:nth-of-type(odd),table.stripes-even>*>tr:nth-of-type(even),table.stripes-hover>*>tr:hover{background:#f8f8f7}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
li>p:empty:only-child::before{content:"";display:inline-block}
ul.checklist>li>p:first-child{margin-left:-1em}
ul.checklist>li>p:first-child>.fa-square-o:first-child,ul.checklist>li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist>li>p:first-child>input[type=checkbox]:first-child{margin-right:.25em}
ul.inline{display:flex;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
td.hdlist2{word-wrap:anywhere}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:4px solid #fff;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background:#00fafa}
.black{color:#000}
.black-background{background:#000}
.blue{color:#0000bf}
.blue-background{background:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background:#fa00fa}
.gray{color:#606060}
.gray-background{background:#7d7d7d}
.green{color:#006000}
.green-background{background:#007d00}
.lime{color:#00bf00}
.lime-background{background:#00fa00}
.maroon{color:#600000}
.maroon-background{background:#7d0000}
.navy{color:#000060}
.navy-background{background:#00007d}
.olive{color:#606000}
.olive-background{background:#7d7d00}
.purple{color:#600060}
.purple-background{background:#7d007d}
.red{color:#bf0000}
.red-background{background:#fa0000}
.silver{color:#909090}
.silver-background{background:#bcbcbc}
.teal{color:#006060}
.teal-background{background:#007d7d}
.white{color:#bfbfbf}
.white-background{background:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt,summary{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,td.hdlist1,span.alt,summary{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background:#fffef7;border-color:#e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]{border-bottom:1px dotted}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#header,#content,#footnotes,#footer{max-width:none}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media amzn-kf8,print{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body class="article toc2 toc-right">
<div id="header">
<h1>Static websites with GatsbyJS and Enonic XP</h1>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#introduction">Introduction</a></li>
<li><a href="#tldr">tl;dr</a></li>
<li><a href="#headless_movie_database">Headless Movie Database</a></li>
<li><a href="#running_queries">Running queries</a></li>
<li><a href="#static_movie_database_project">Static Movie Database project</a></li>
<li><a href="#enonic_gatsby_plugin">Enonic Gatsby plugin</a></li>
<li><a href="#movies_page">Movies page</a>
<ul class="sectlevel2">
<li><a href="#create_query">Create query</a></li>
<li><a href="#create_template">Create template</a></li>
<li><a href="#create_page">Create page</a></li>
</ul>
</li>
<li><a href="#persons_page">Persons page</a></li>
<li><a href="#link_to_pages">Link to pages</a></li>
<li><a href="#movie_details_page">Movie details page</a>
<ul class="sectlevel2">
<li><a href="#update_movie_query">Update movie query</a></li>
<li><a href="#movie_details_template">Movie details template</a></li>
<li><a href="#update_plugin">Update plugin</a></li>
<li><a href="#link_to_movie_details">Link to movie details</a></li>
</ul>
</li>
<li><a href="#person_details">Person details</a></li>
<li><a href="#cross_referencing">Cross-referencing</a></li>
<li><a href="#going_live">Going live</a></li>
</ul>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This guide takes you through the basics of building Gatsby sites using data from Enonic XP.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This guide assumes you are already familiar with Gatsby and Enonic XP, and have both
<a href="https://www.gatsbyjs.com/docs/tutorial/part-0/#gatsby-cli">Gatsby CLI</a> and <a href="https://developer.enonic.com/start">Enonic CLI</a> installed in your system.
If not, we recommend looking into these tutorials before commencing:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://developer.enonic.com/templates/headless-cms/">Headless CMS Starter</a></p>
</li>
<li>
<p><a href="https://www.gatsbyjs.org/tutorial/">Gatsby Tutorial</a></p>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="introduction"><a class="link" href="#introduction">Introduction</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Gatsby sites are created from various data sources. Throughout this guide we will use Enonic XP&#8217;s headless API, also known as <a href="https://developer.enonic.com/docs/headless-cms/stable">project Guillotine</a>.</p>
</div>
<div class="paragraph">
<p>The headless CMS API is based on graphQL, which is a natural companion for Gatsby. Throughout this guide we will be using a dataset called the <a href="https://developer.enonic.com/templates/headless-cms/">Headless Move Database</a>.</p>
</div>
<div class="paragraph">
<p>We have also developed a Gatsby plugin that simplifies the integration between Gatsby and Enonic XP even further.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="tldr"><a class="link" href="#tldr">tl;dr</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>To skip to the end of the tutorial and run a pre-assembled version, follow these simple steps:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Launch Enonic XP, create and deploy an Enonic project based on Headless Movie DB in a clean sandbox</p>
<div class="literalblock">
<div class="content">
<pre>enonic project create -r app-hmdb
cd myproject
enonic project deploy</pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Accept default values for project name (<code>com.example.myproject</code>) and version suggested by CLI while creating the project
</td>
</tr>
</table>
</div>
</li>
<li>
<p>Verify that the API is available on <a href="http://localhost:8080/site/hmdb/draft/hmdb/_graphql" class="bare">http://localhost:8080/site/hmdb/draft/hmdb/_graphql</a></p>
</li>
<li>
<p>Create a new Gatsby project as follows:</p>
<div class="literalblock">
<div class="content">
<pre>gatsby new tldr https://github.com/enonic/guide-gatsby-starter
...
cd tldr
gatsby develop</pre>
</div>
</div>
</li>
<li>
<p>The generated site should now be available on <a href="http://localhost:8000" class="bare">http://localhost:8000</a></p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="headless_movie_database"><a class="link" href="#headless_movie_database">Headless Movie Database</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let&#8217;s start by setting up an XP project with a suitable dataset and the headless API. The <strong>Headless Movie Database</strong> is a set of sample data about Movies and Persons (actors and directors).</p>
</div>
<div class="paragraph">
<p>Let&#8217;s get going:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create a new project using the headless starter</p>
<div class="paragraph">
<p>The following command creates a project based on the headless starter:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>enonic project create -r app-hmdb</pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Stick with the standard values and use the project name <code>com.example.myproject</code> for the tutorial examples to work properly.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>Deploy the application</p>
<div class="literalblock">
<div class="content">
<pre>enonic project deploy</pre>
</div>
</div>
<div class="paragraph">
<p>The application will now be installed, and the content imported.</p>
</div>
<div class="paragraph">
<p>From Content Studio, the site will look something like this:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="media/hmdb-content.png" alt="Headless Movie Database site in Content Studio" width="768px">
</div>
</div>
</li>
<li>
<p>Access the API</p>
<div class="paragraph">
<p>The API and the draft content should now be accessible on <a href="http://localhost:8080/site/hmdb/draft/hmdb/_graphql" class="bare">http://localhost:8080/site/hmdb/draft/hmdb/_graphql</a></p>
</div>
<div class="imageblock">
<div class="content">
<img src="media/graphql-playground.png" alt="GraphQL playground" width="507px">
</div>
</div>
<div class="paragraph">
<p>The interface served when we access the endpoint lets us browse the API directly. Use the tabs on the far right to discover. Use the left hand field to run queries, and the result will be presented in the right hand field.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<strong>New to GraphQL?</strong> Check out the <a href="https://graphql.org">GraphQL documentation</a>.
</td>
</tr>
</table>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="running_queries"><a class="link" href="#running_queries">Running queries</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>One of the objectives with this tutorial is listing and presenting movies. Using the Headless API interface, lets run a simple query that retrieve movies:</p>
</div>
<div class="listingblock">
<div class="title">Query to fetch movies from Headless API</div>
<div class="content">
<pre class="highlight"><code class="language-GraphQL" data-lang="GraphQL">{
  guillotine {
    query(contentTypes: "com.example.myproject:movie", query: "valid='true'", sort: "displayName") {
      id: _id
      displayName
    }
  }
}</code></pre>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="media/movies-query.png" alt="GraphQL query to retrieve movies" width="929px">
</div>
</div>
<div class="paragraph">
<p>The GraphQL query interestingly has a field called <code>query</code>. Interestingly, this actually exposes XP&#8217;s content API query function. We pass the following parameters to the function:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">contentTypes</dt>
<dd>
<p>Fetch only content of the specific type <code>com.example.myproject:movie</code>.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<code>com.example.myproject</code> represents your application name (the one you used when creating the XP project).
</td>
</tr>
</table>
</div>
</dd>
<dt class="hdlist1">query: "valid='true'"</dt>
<dd>
<p>Filter out items that don&#8217;t have all of the mandatory fields filled out. This is only relevant for draft items, as only valid items can be published.</p>
</dd>
<dt class="hdlist1">sort: "displayName"</dt>
<dd>
<p>To sort the list by name</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>Additionally, the query specifies to get the fiels <code>id</code> and <code>displayName</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Content type specific fields can be accessed through introspection <code>&#8230;&#8203; on com_example_myproject_Movie</code> where you again use the application name.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="static_movie_database_project"><a class="link" href="#static_movie_database_project">Static Movie Database project</a></h2>
<div class="sectionbody">
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The following steps assume you have already installed the Gatsby developer environment, including <code>Node.js</code>, <code>Git</code> and the <code>Gatsby CLI</code>
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create a new Gatsby project</p>
<div class="paragraph">
<p>We&#8217;ll call it the "Static Movie DataBase" or SMDB for short. Simply run this command in your terminal:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>gatsby new smdb https://github.com/gatsbyjs/gatsby-starter-default</pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
When the site wizard asks you which package manager you would like to use for your new site, choose <code>NPM</code>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The command creates the following project file structure:</p>
</div>
<div class="listingblock">
<div class="title">Gatsby movie datbase project structure:</div>
<div class="content">
<pre class="highlight"><code class="language-files" data-lang="files">SMDB
src/
  components/
  images/
  pages/
gatsby-config.js
package-lock.json
package.json</code></pre>
</div>
</div>
</li>
<li>
<p>Start the Gatsby development server</p>
<div class="paragraph">
<p>To start your local Gatsby build server, run the following command:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>gatsby develop</pre>
</div>
</div>
<div class="paragraph">
<p>You should now have a Gatsby development server running on <a href="http://localhost:8000/" class="bare">http://localhost:8000/</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="media/gatsby-default-starter.png" alt="Gatsby Default Starter" width="1008px">
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="enonic_gatsby_plugin"><a class="link" href="#enonic_gatsby_plugin">Enonic Gatsby plugin</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Gatsby can fetch content directly from Enonic&#8217;s GraphQL API, and then programmatically use the content to create pages. However, to simplify the process we&#8217;ll use Enonic&#8217;s Gatsby plugin instead.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Install plugin</p>
<div class="paragraph">
<p>Stop your Gatsby instance. And run the following command:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>npm install gatsby-plugin-enonic</pre>
</div>
</div>
<div class="paragraph">
<p>The <code>gatsby-plugin-enonic</code> is now downloaded from NPM and adds a dependency to the <code>package.json</code> file inside your project folder.</p>
</div>
<div class="paragraph">
<p>Once completed, start the Gatsby development environment again, this time the plugin should be automatically loaded as well.</p>
</div>
</li>
<li>
<p>Configure the plugin</p>
<div class="paragraph">
<p>Open the file <code>gatsby-config.js</code>, it is located in your project root folder. This file is where you configure plugins used by the project.</p>
</div>
<div class="paragraph">
<p>Add this config inside the <code>plugins []</code> array of your config, like this:</p>
</div>
<div class="listingblock">
<div class="title">Base config for gatsby-config.js</div>
<div class="content">
<pre class="highlight"><code class="language-JSON" data-lang="JSON">// First parts of config file
plugins [
{
  resolve: `gatsby-plugin-enonic`,
  options: {
    api: 'http://localhost:8080/site/hmdb/draft/hmdb/_graphql',
    refetchInterval: 10,
  }
},
// other plugins go here
]
// Last parts of config file</code></pre>
</div>
</div>
<div class="paragraph">
<p>Details on the plugins configuration options:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">api</dt>
<dd>
<p>URL to the specific headless API.</p>
</dd>
<dt class="hdlist1">refetchInterval (optional)</dt>
<dd>
<p>How frequently you want Gatsby to pull XP for new content (in seconds). You don&#8217;t want this to be too often since a new request will be sent to server every time to fetch the data.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>With both XP and Gatsby setup, we&#8217;re ready to start buildig the site.</p>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="movies_page"><a class="link" href="#movies_page">Movies page</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>The plugin supports two types of pages: <code>list</code> and <code>details</code>. Let&#8217;s start by setting up a page for listing Movies.</p>
</div>
<div class="sect2">
<h3 id="create_query"><a class="link" href="#create_query">Create query</a></h3>
<div class="paragraph">
<p>We will start by setting up a query to fetch movies from Enonic XP.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create a new folder <code>src/queries/</code> in your Gatsby project.</p>
</li>
<li>
<p>In <code>src/queries</code> create a file called <code>getMovies.js</code></p>
<div class="paragraph">
<p>Add the following code to the file. If you look closely, you will recognise the query used to fetch movies. However, this time it is wrapped in JavaScript.</p>
</div>
<div class="listingblock">
<div class="title">src/queries/getMovies.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">const query = `{
  guillotine {
    query(contentTypes: "com.enonic.myproject:movie", query: "valid='true'", sort: "displayName") {
      id: _id
      displayName
    }
  }
}
`
module.exports = query;</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
This query is the same query as we used when testing the headless API earlier.
</td>
</tr>
</table>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="create_template"><a class="link" href="#create_template">Create template</a></h3>
<div class="paragraph">
<p>To present the list of movies we will need a template.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create a new folder <code>/src/templates</code> in your Gatsby project.</p>
</li>
<li>
<p>Create the file <code>/src/templates/list.js</code> with the following content:</p>
<div class="listingblock">
<div class="title">src/templates/list.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">import React from "react"
import Layout from "../components/layout"
import Seo from "../components/seo"

const ListPage = (args) =&gt; {
    const { pageContext } = args
    return (
      &lt;Layout&gt;
        &lt;Seo title={pageContext.title || `List`} /&gt;
        &lt;h1&gt;{pageContext.title}&lt;/h1&gt;
          {
              pageContext.nodes.map(node =&gt; (
                &lt;div key={node.id}&gt;
                    &lt;span&gt;{node.displayName}&lt;/span&gt;
                &lt;/div&gt;
          ))
          }&lt;br/&gt;
      &lt;/Layout&gt;
    )
}

export default ListPage</code></pre>
</div>
</div>
<div class="paragraph">
<p>Gatsby operates with React components. Our listing page <code>const ListPage</code> is also a React component. It takes a <code>pageContext</code> argument which contains the list of <code>nodes</code> generated from our query. The component iterates through the array of nodes and for every node it outputs a <code>&lt;div&gt;</code> with unique key (<code>node.id</code>) and an item&#8217;s display name (<code>node.displayName</code>).</p>
</div>
<div class="paragraph">
<p>&lt;Seo&gt; is another React component that comes with the Gatsby starter. It generates various Seo tags. By passing the <code>title</code> argument to it (like we do above) it will use the page title in Seo tags and display the specified title in the browser tab.</p>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="create_page"><a class="link" href="#create_page">Create page</a></h3>
<div class="paragraph">
<p>We now need to instruct the plugin to generate the <code>movies</code> page, by combining the query and template created earlier.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Update the plugin configuration with instructions for creating the movies page</p>
<div class="listingblock">
<div class="title">Update for gatsby-config.js</div>
<div class="content">
<pre class="highlight"><code class="language-JSON" data-lang="JSON">{
  resolve: `gatsby-plugin-enonic`,
  options: {
    api: 'http://localhost:8080/site/hmdb/draft/hmdb/_graphql',
    refetchInterval: 10,
    pages: [{
      query: require.resolve('./src/queries/getMovies'),
      list: {
        url: '/movies',
        template: require.resolve('./src/templates/list'),
        title: 'Movies'
      }
    }]
  }
},</code></pre>
</div>
</div>
<div class="paragraph">
<p>The new <code>pages</code> entry gives instructions on how to generate the movies page by combining a query and a template.</p>
</div>
</li>
<li>
<p>Generate page</p>
<div class="paragraph">
<p>When making changes to a query, or plugin configuration, the Gatsby development server must be restarted. (press <code>Ctrl + C</code> to stop, then run <code>gatsby develop</code> once again)</p>
</div>
<div class="paragraph">
<p>If everything was configured properly, you will see logs indicating that the site is built and that the Gatsby development server is ready to serve the content.</p>
</div>
</li>
<li>
<p>Open the Gatsby site at <a href="http://localhost:8000/movies" class="bare">http://localhost:8000/movies</a>, and you should see the following:</p>
<div class="imageblock">
<div class="content">
<img src="media/movies-list.png" alt="Movies listing" width="881px">
</div>
</div>
<div class="paragraph">
<p><strong>Congratulations!</strong> You just created your first Gatsby page with content from Enonic XP.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Getting errors? Double-check the previous steps to make sure you didn&#8217;t miss anything, and verify that Enonic XP is running on port 8080.
</td>
</tr>
</table>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="persons_page"><a class="link" href="#persons_page">Persons page</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>This time, we repeat the steps from the movies listing page, but with a few adjustments:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create the persons query file</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
This time we&#8217;re fetching some more data for persons, such as person images, as we will need this later.
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="title">src/queries/getPersons.js</div>
<div class="content">
<pre class="highlight"><code class="language-JavaScript" data-lang="JavaScript">const query = `{
  guillotine {
    query(contentTypes: "com.example.myproject:person", query: "valid='true'", sort: "displayName", first: 100) {
      id: _id
      displayName
      name: _name
      ... on com_example_myproject_Person {
        data {
          bio
          photos {
            ... on media_Image {
              imageUrl: imageUrl(type: absolute, scale: "width(300)")
              attachments {
                altName: name
              }
            }
          }
        }
      }
  }
  }
}`

module.exports = query;</code></pre>
</div>
</div>
</li>
<li>
<p>Add the persons page to your plugin configuration.</p>
<div class="listingblock">
<div class="title">Update for gatsby-config.js</div>
<div class="content">
<pre class="highlight"><code class="language-JSON" data-lang="JSON">{
  resolve: `gatsby-plugin-enonic`,
  options: {
    api: 'http://localhost:8080/site/hmdb/draft/hmdb/_graphql',
    refetchInterval: 10,
    pages: [{
      query: require.resolve('./src/queries/getMovies'),
      list: {
        url: '/movies',
        template: require.resolve('./src/templates/list'),
        title: 'Movies'
      }
    },
    {
      query: require.resolve('./src/queries/getPersons'),
      list: {
        url: '/persons',
        template: require.resolve('./src/templates/list'),
        title: 'Persons'
      }
    }]
  }
},</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
We simply reuse the template we used for listing movies.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>Open the persons page to verify that it works:
<a href="http://localhost:8000/persons" class="bare">http://localhost:8000/persons</a></p>
<div class="paragraph">
<p>It should look somethinglike this:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="media/persons-list.png" alt="Persons list page" width="675px">
</div>
</div>
</li>
</ol>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The page only lists 10 persons, but there are more in XP. To list more, you can increase this limit by adding <code>first: N</code> parameter to the query.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>query(contentTypes: "com.example.myproject:person", query: "valid='true'", sort: "displayName", first: 100)</pre>
</div>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="link_to_pages"><a class="link" href="#link_to_pages">Link to pages</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Now, lets add a link from the main page to the <code>movies</code> and <code>persons</code> pages.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Load the site front page in your browser:
<a href="http://localhost:8000" class="bare">http://localhost:8000</a></p>
</li>
<li>
<p>Open the main page file <code>/src/pages/index.js</code>, and update it with the following content:</p>
<div class="listingblock">
<div class="title">/src/pages/index.js</div>
<div class="content">
<pre class="highlight"><code class="language-JSON" data-lang="JSON">import React from "react"
import { Link } from "gatsby"
import Layout from "../components/layout"
import { XpLogo } from "../components/xpLogo"
import Seo from "../components/seo"

const IndexPage = () =&gt; (
  &lt;Layout&gt;
    &lt;Seo title="Home" /&gt;
    &lt;h1&gt;Hi people&lt;/h1&gt;
    &lt;p&gt;Welcome to your new Gatsby site.&lt;/p&gt;
    &lt;p&gt;Now go build something great.&lt;/p&gt;
    &lt;div style={{ maxWidth: `300px`, marginBottom: `1.45rem` }}&gt;
      &lt;XpLogo /&gt;
    &lt;/div&gt;
    &lt;div style={{ marginBottom: `1rem` }}&gt;
      &lt;Link to="/movies/"&gt;Open movies&lt;/Link&gt;&lt;br/&gt;
      &lt;Link to="/persons/"&gt;Open persons&lt;/Link&gt;
    &lt;/div&gt;

  &lt;/Layout&gt;
)

export default IndexPage</code></pre>
</div>
</div>
<div class="paragraph">
<p>The page should refresh automatically in your browser, and you will see this:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="media/front-links.png" alt="Main page with links" width="918px">
</div>
</div>
</li>
<li>
<p>Click the links to verify that they work!</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="movie_details_page"><a class="link" href="#movie_details_page">Movie details page</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Next we want to create pages that represent each specific movie.</p>
</div>
<div class="paragraph">
<p>We&#8217;ll use the plugin to generate a page for every movie retrieved from the storage.</p>
</div>
<div class="paragraph">
<p>Each movie will also need a unique URL. By default the plugin uses the <code>id</code> field, which is alway unique. However XP always provides a URL-friendly <code>name</code> field (AKA slug) as well. This field is unique within it&#8217;s location of the content structure, and fits perfectly for our use case.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="media/movie-fields.png" alt="Fields from the Movie content type" width="699px">
</div>
</div>
<div class="sect2">
<h3 id="update_movie_query"><a class="link" href="#update_movie_query">Update movie query</a></h3>
<div class="paragraph">
<p>For every movie we want to show an abstract, release date, and a movie image. This means we need to modify our query as well.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Update the movie query to fetch more fields.</p>
<div class="listingblock">
<div class="title">src/queries/getMovies.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">const query = `{
  guillotine {
    query(contentTypes: "com.example.myproject:movie", query: "valid='true'", sort: "displayName") {
      id: _id
      displayName
      name: _name
      ... on com_example_myproject_Movie {
        data {
          subtitle
          abstract
          photos {
            ... on media_Image {
              imageUrl: imageUrl(type: absolute, scale: "width(300)")
              attachments {
                imageText: name
              }
            }
          }
        }
      }
    }
  }
}
`

module.exports = query;</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
Lines with colons are for aliases - field names that you want to use instead of original names. For example,
if you want to use <code>name</code> instead of original <code>_name</code> then you do <code>name: _name</code>
</td>
</tr>
</table>
</div>
</li>
<li>
<p>Verify query:</p>
<div class="paragraph">
<p>By running the above query directly in XP, we get the following result:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="media/movies-detail-query.png" alt="Query result for movie details" width="720px">
</div>
</div>
<div class="paragraph">
<p>Notice how the result now includes a lot of new data, including links to images.</p>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="movie_details_template"><a class="link" href="#movie_details_template">Movie details template</a></h3>
<div class="paragraph">
<p>Next we need a new template to display all the movie details.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create a new templates file</p>
<div class="listingblock">
<div class="title">src/templates/movie.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">import React from "react"
import Layout from "../components/layout"
import Seo from "../components/seo"

const getPageTitle = (pageContext) =&gt; {
  const node = pageContext.node;

  if (!!node &amp;&amp; pageContext.title &amp;&amp; (node[pageContext.title] || node.data[pageContext.title])) {
    return node[pageContext.title] || node.data[pageContext.title];
  }

  return pageContext.title || 'Person';
};

const MoviePage = (args) =&gt; {
    const { pageContext } = args;
    const movie = pageContext.node;
    const movieMeta = movie.data;

    return (
      &lt;Layout&gt;
        &lt;Seo title={getPageTitle(pageContext)} /&gt;
        &lt;div&gt;
          &lt;div style={{
              display: 'flex',
              alignItems: 'baseline'
            }}&gt;
            &lt;h2&gt;{movie.displayName}
            {movieMeta.release &amp;&amp; (
              &lt;i style={{
                fontStyle: 'normal',
                fontWeight: 'normal',
                fontSize: '24px',
                marginLeft: '10px',
                opacity: '0.7'
              }}&gt;({new Date(movieMeta.release).getFullYear()})&lt;/i&gt;
            )}
            &lt;/h2&gt;
          &lt;/div&gt;
          &lt;div style={{
              display: `flex`
            }}&gt;
            &lt;img
              style={{
                maxWidth: '400px',
                width: '50%'
              }}
              src={movieMeta.photos[0].imageUrl} title={movieMeta.subtitle} alt={movieMeta.photos[0].attachments[0].imageText} /&gt;
            &lt;p style={{
                margin: `0 20px`
            }}&gt;&lt;i&gt;{movieMeta.abstract}&lt;/i&gt;&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/Layout&gt;
    )
}

export default MoviePage</code></pre>
</div>
</div>
<div class="paragraph">
<p>This template is of course just an example, using inline styling and other dirty tricks. Feel free to customize it later :-).</p>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="update_plugin"><a class="link" href="#update_plugin">Update plugin</a></h3>
<div class="paragraph">
<p>Lets configure the plugin to generate the movie detail pages.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Update your Gatsby configuration</p>
<div class="listingblock">
<div class="title">Update for gatsby-config.js</div>
<div class="content">
<pre class="highlight"><code class="language-JSON" data-lang="JSON">{
  resolve: `gatsby-plugin-enonic`,
  options: {
    api: 'http://localhost:8080/site/hmdb/draft/hmdb/_graphql',
    refetchInterval: 10,
    pages: [{
      query: require.resolve('./src/queries/getMovies'),
      list: {
        url: '/movies',
        template: require.resolve('./src/templates/list'),
        title: 'Movies'
      },
      details: {
        template: require.resolve('./src/templates/movie'),
        key: 'name',
        title: 'displayName'
      }
    },
    {
      query: require.resolve('./src/queries/getPersons'),
      list: {
        url: '/persons',
        template: require.resolve('./src/templates/list'),
        title: 'Persons'
      }
    }]
  }
},</code></pre>
</div>
</div>
<div class="paragraph">
<p>Notice how the new <code>details</code> section is placed into the same page configuration as the list page. This basically means we re-use the query to also generate the details page.</p>
</div>
<div class="paragraph">
<p>The new config options for detail pages are:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">url (optional)</dt>
<dd>
<p>Base url of the details page. If omitted, value from <code>pages.list.url</code> will be used. In our case, the pages will be created as <code>/movies/{key}</code>.</p>
</dd>
<dt class="hdlist1">key (optional)</dt>
<dd>
<p>Specify the field in the query whose value will be used as key for the details page url. Default is <code>_id</code>. In our case, we are using the <code>name</code> field.</p>
</dd>
</dl>
</div>
</li>
<li>
<p>Visit one of the movie pages to see the glorious result: <a href="http://localhost:8000/movies/pulp-fiction" class="bare">http://localhost:8000/movies/pulp-fiction</a></p>
<div class="imageblock">
<div class="content">
<img src="media/movie-details.png" alt="Movie details page" width="1091px">
</div>
</div>
<div class="paragraph">
<p>Simple but pretty good looking huh?</p>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="link_to_movie_details"><a class="link" href="#link_to_movie_details">Link to movie details</a></h3>
<div class="paragraph">
<p>Generating pages is fine, but we also need to configure our list to link to the actual movies.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Update the list template to make use of Gatsby&#8217;s <code>Link</code> component:</p>
<div class="listingblock">
<div class="title">src/templates/list.js</div>
<div class="content">
<pre class="highlight"><code class="language-Javascript" data-lang="Javascript">import React from "react"
import Layout from "../components/layout"
import Seo from "../components/seo"
import {Link} from "gatsby";

const ListPage = (args) =&gt; {
    const { pageContext } = args
    return (
      &lt;Layout&gt;
        &lt;Seo title={pageContext.title || `List`} /&gt;
        &lt;h1&gt;{pageContext.title}&lt;/h1&gt;
          {
              pageContext.nodes.map(node =&gt; (
                &lt;div key={node.id}&gt;
                    {pageContext.detailsPageUrl &amp;&amp;
                        &lt;Link to={`${pageContext.detailsPageUrl}/${node[pageContext.detailsPageKey]}`}&gt;
                            {node.displayName}
                        &lt;/Link&gt;
                    }
                    {!pageContext.detailsPageUrl &amp;&amp; &lt;span&gt;{node.displayName}&lt;/span&gt;}
                &lt;/div&gt;
          ))
          }&lt;br/&gt;
      &lt;/Layout&gt;
    )
}

export default ListPage</code></pre>
</div>
</div>
</li>
<li>
<p>The list page should refresh automatically, and you will see that the movie list has now turned into a list of links.</p>
<div class="imageblock">
<div class="content">
<img src="media/movies-link-list.png" alt="Movie list with link to the details pages" width="824px">
</div>
</div>
<div class="paragraph">
<p>Click any link in the list to open our new movie details page:</p>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="person_details"><a class="link" href="#person_details">Person details</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>By repeating some of the steps above, we can create detail pages for persons as well.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Add a person template</p>
<div class="listingblock">
<div class="title">src/templates/person.js</div>
<div class="content">
<pre class="highlight"><code class="language-JavaScript" data-lang="JavaScript">import React from "react"
import Layout from "../components/layout"
import Seo from "../components/seo"
import {Link} from "gatsby";

const getPageTitle = (pageContext) =&gt; {
  const node = pageContext.node;

  if (!!node &amp;&amp; pageContext.title &amp;&amp; (node[pageContext.title] || node.data[pageContext.title])) {
    return node[pageContext.title] || node.data[pageContext.title];
  }

  return pageContext.title || 'Person';
};

const PersonPage = (args) =&gt; {
  const { pageContext } = args;
  const person = pageContext.node;
  const personMeta = person.data;

    return (
      &lt;Layout&gt;
        &lt;Seo title={getPageTitle(pageContext)} /&gt;
        &lt;div&gt;
          &lt;div style={{
            display: 'flex',
            alignItems: 'baseline'
          }}&gt;
            &lt;h2&gt;{person.displayName}&lt;/h2&gt;
          &lt;/div&gt;
          &lt;div style={{
            display: `flex`
          }}&gt;
            &lt;img
              style={{
                maxWidth: '400px',
                width: '50%'
              }}
              src={personMeta.photos[0].imageUrl} title={person.displayName} alt={personMeta.photos[0].attachments[0].altImageText} /&gt;
            &lt;p style={{
              margin: `0 20px`
            }}&gt;&lt;i&gt;{personMeta.bio}&lt;/i&gt;&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;p&gt;
          &lt;Link to={`${pageContext.listPageUrl}`}&gt;Back to Persons&lt;/Link&gt;
        &lt;/p&gt;
      &lt;/Layout&gt;
    )
}

export default PersonPage</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
You could later try to move the <code>getPageTitle()</code> function to a separate helper class since it&#8217;s exactly the same as the one in the Movie details page.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>Update plugin config to generate person detail pages</p>
<div class="listingblock">
<div class="title">Update for gatsby-config.js</div>
<div class="content">
<pre class="highlight"><code class="language-JSON" data-lang="JSON">    {
      resolve: `gatsby-plugin-enonic`,
      options: {
        api: 'http://localhost:8080/site/hmdb/draft/hmdb/_graphql',
        refetchInterval: 10,
        pages: [{
          query: require.resolve('./src/queries/getMovies'),
          list: {
            url: '/movies',
            template: require.resolve('./src/templates/list'),
            title: 'Movies'
          },
          details: {
            template: require.resolve('./src/templates/movie'),
            key: 'name',
            title: 'displayName'
          }
        },
        {
          query: require.resolve('./src/queries/getPersons'),
          list: {
            url: '/persons',
            template: require.resolve('./src/templates/list'),
            title: 'Persons'
          },
          details: {
            template: require.resolve('./src/templates/person'),
            key: 'name',
            title: 'displayName'
          }
        }]
      }
    },</code></pre>
</div>
</div>
</li>
<li>
<p>Restart your Gatsby development server and check out the new pages:</p>
<div class="imageblock">
<div class="content">
<img src="media/persons-link-list.png" alt="Person list with links to the details pages" width="768px">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="media/morgan-freeman.png" alt="Person details page" width="960px">
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cross_referencing"><a class="link" href="#cross_referencing">Cross-referencing</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>To enliven our movie page further. Let&#8217;s display cast for each movie on the movie&#8217;s details page. We&#8217;ll add movie characters, including name, actor, actor&#8217;s photo, and link to the actor&#8217;s detail page.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Update the movie query to also extract the cast.</p>
<div class="listingblock">
<div class="title">src/queries/getMovies.js</div>
<div class="content">
<pre class="highlight"><code class="language-JavaScript" data-lang="JavaScript">const query = `{
  guillotine {
    query(contentTypes: "com.example.myproject:movie", query: "valid='true'", sort: "displayName") {
      id: _id
      displayName
      name: _name
      ... on com_example_myproject_Movie {
        data {
          subtitle
          abstract
          photos {
            ... on media_Image {
              imageUrl: imageUrl(type: absolute, scale: "width(300)")
              attachments {
                imageText: name
              }
            }
          }
          cast {
            character
            actor {
              id: _id
              name: _name
              displayName
              ... on com_example_myproject_Person {
                data {
                  photos {
                    ... on media_Image {
                      imageUrl: imageUrl(type: absolute, scale: "block(100,100)")
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}`

module.exports = query;</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
We include the <code>name</code> field of the persons, as we will use use it to link back to the actor&#8217;s detail page.
</td>
</tr>
</table>
</div>
</li>
<li>
<p>Update the movie template to list the cast</p>
<div class="listingblock">
<div class="title">src/templates/movie.js</div>
<div class="content">
<pre class="highlight"><code class="language-JavaScript" data-lang="JavaScript">import React from "react"
import Layout from "../components/layout"
import Seo from "../components/seo"
import {Link} from "gatsby"

const getPageTitle = (pageContext) =&gt; {
  const node = pageContext.node;

  if (!!node &amp;&amp; pageContext.title &amp;&amp; (node[pageContext.title] || node.data[pageContext.title])) {
    return node[pageContext.title] || node.data[pageContext.title];
  }

  return pageContext.title || 'Person';
};

const MoviePage = (args) =&gt; {
  const { pageContext } = args;
  const movie = pageContext.node;
  const movieMeta = movie.data;

  return (
    &lt;Layout&gt;
      &lt;Seo title={getPageTitle(pageContext)} /&gt;
      &lt;div&gt;
        &lt;div style={{
            display: 'flex',
            alignItems: 'baseline'
          }}&gt;
          &lt;h2&gt;{movie.displayName}
          {movieMeta.release &amp;&amp; (
            &lt;i style={{
              fontStyle: 'normal',
              fontWeight: 'normal',
              fontSize: '24px',
              marginLeft: '10px',
              opacity: '0.7'
            }}&gt;({new Date(movieMeta.release).getFullYear()})&lt;/i&gt;
          )}
          &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div style={{
            display: `flex`
          }}&gt;
          &lt;img
            style={{
              maxWidth: '400px',
              width: '50%'
            }}
            src={movieMeta.photos[0].imageUrl} title={movieMeta.subtitle} alt={movieMeta.photos[0].attachments[0].imageText} /&gt;
          &lt;div style={{
                margin: `0 20px`
            }}&gt;
            &lt;p&gt;&lt;i&gt;{movieMeta.abstract}&lt;/i&gt;&lt;/p&gt;
            {movieMeta.cast &amp;&amp; (
              &lt;&gt;
                &lt;h4&gt;Cast&lt;/h4&gt;
                &lt;div style={{
                    display: `flex`,
                    padding: '0 15px'
                  }}&gt;
                  {
                    movieMeta.cast.map(cast =&gt; (
                      &lt;div
                        key={cast.actor.id}
                        style={{
                          flex: '1 1 0px',
                          display: `flex`,
                          flexDirection: `column`
                        }}
                      &gt;
                        &lt;img
                          style={{
                            width: '50%',
                            marginBottom: '0.5rem'
                          }}
                          src={cast.actor.data.photos[0].imageUrl} title={`${cast.actor.displayName} as ${cast.character}`} alt={cast.character} /&gt;
                          &lt;div
                            style={{
                              display: `flex`,
                              flexDirection: `column`
                            }}&gt;
                            &lt;i
                              style={{
                                fontSize: '14px'
                            }}&gt;{cast.character}&lt;/i&gt;
                            &lt;Link to={`/persons/${cast.actor.name}`}&gt;
                                &lt;span
                                  style={{
                                    fontSize: '14px'
                                }}&gt;{cast.actor.displayName}&lt;/span&gt;
                            &lt;/Link&gt;
                          &lt;/div&gt;
                      &lt;/div&gt;

                    ))
                  }
                &lt;/div&gt;
              &lt;/&gt;
            )}
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;p&gt;
        &lt;Link to={`${pageContext.listPageUrl}`}&gt;Back to Movies&lt;/Link&gt;
      &lt;/p&gt;
    &lt;/Layout&gt;
  )
}

export default MoviePage</code></pre>
</div>
</div>
</li>
<li>
<p>Restart the Gatsby dev server once more, open any movie page and embrace the result:</p>
<div class="imageblock">
<div class="content">
<img src="media/movie-cast.png" alt="Movie details page with cast" width="503px">
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="going_live"><a class="link" href="#going_live">Going live</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>So far, we have been accessing draft content. This is indeed useful when developing, or setting up a preview environment. However, for production purposes we need to render the site using published content only.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Publish the HMDB site</p>
<div class="paragraph">
<p>Visit Content Studio, select the <code>HMDB`site and choose `Publish tree</code> from the top right workflow menu. From the dialog, click <code>Publish Now</code> to complete the action.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="media/publish.png" alt="Publish all items" width="503px">
</div>
</div>
<div class="paragraph">
<p>By publishing, your content is "merged" to the <code>master branch</code>. So far we have only been accessing the <code>draft branch</code>.</p>
</div>
</li>
<li>
<p>Verify that both your API and content is live</p>
<div class="paragraph">
<p>Visiting the following URL should open the API playground: <a href="http://localhost:8080/site/hmdb/draft/hmdb/_graphql" class="bare">http://localhost:8080/site/hmdb/draft/hmdb/_graphql</a></p>
</div>
</li>
<li>
<p>Update your plugin configuration to read from master branch.</p>
<div class="listingblock">
<div class="title">Update for gatsby-config.js</div>
<div class="content">
<pre class="highlight"><code class="language-JSON" data-lang="JSON">{
  resolve: `gatsby-plugin-enonic`,
  options: {
    api: 'http://localhost:8080/site/hmdb/master/hmdb/api',
    refetchInterval: 10,
    pages: [{
      query: require.resolve('./src/queries/getMovies'),
      list: {
        url: '/movies',
        template: require.resolve('./src/templates/list'),
        title: 'Movies'
      },
      details: {
        template: require.resolve('./src/templates/movie'),
        key: 'name',
        title: 'displayName'
      }
    },
    {
      query: require.resolve('./src/queries/getPersons'),
      list: {
        url: '/persons',
        template: require.resolve('./src/templates/list'),
        title: 'Persons'
      },
      details: {
        template: require.resolve('./src/templates/person'),
        key: 'name',
        title: 'displayName'
      }
    }]
  }
}</code></pre>
</div>
</div>
</li>
<li>
<p>Verify the site</p>
<div class="paragraph">
<p>Restart Gatsby once more to pickup the new site, and verify that everything is generated like before on <a href="http://localhost:8000" class="bare">http://localhost:8000</a></p>
</div>
</li>
<li>
<p>Finally, test updating and publishing content</p>
<div class="paragraph">
<p>Try editing an existing content (updating the draft branch), verify that <em>nothing</em> happes on the Gatsby server.</p>
</div>
<div class="paragraph">
<p>Publish the content, and Gatsby will re-generate your site with the updated content within a couple of seconds.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Gatsby will only generate new pages when restarted.
</td>
</tr>
</table>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p><strong>Congratulations!</strong>
You have now built a simple Gatsby site rendering static pages based on content from Enonic XP.</p>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2023-08-07 09:52:15 UTC
</div>
</div>
</body>
</html>